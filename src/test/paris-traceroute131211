[ERROR](Util.cc, 281)Invalid address
Print the route packets take to network host

Usage: traceroute [Options] [Destination]

Options:
  -h, --help               print this help
  -V, --version            print version
  -v, --verbose            print debug messages
  -Q, --quiet              print only results
  -f, --first_ttl=TTL      set the initial ttl to TTL (default: 1)
  -m, --max_ttl=TTL        set the maximum ttl to TTL (default: 30)
  -p, --protocol=PROTOCOL  use PROTOCOL to send probes (udp, tcp, icmp)
                           The default is 'udp'
  -s, --source_port=PORT   set PORT as source port (default: 33456) pid: use PID
  -d, --dest_port=PORT     set PORT as destination port (default: 33457)
  -t, --tos=TOS            set TOS as type of service (default: 0)
  -w MS                    wait MS ms between each probe (default: 50ms)
  -T, --timeout=MS         set a timeout of MS ms on each probe
                           The default is 5000ms
  -q, --query=NBR          send NBR probes to each host (default: 3)
  -M, --missing_hop=HOP    stop traceroute after HOP consecutive down hops
                           The default is 3
  -a, --algo=ALGO          algorithm to use (--algo=help for more help)
                           The default is 'hopbyhop'
  -L, --length=LEN         set the packet length to be used in outgoing packets
                           The default is 0
  -n                       print hop addresses numerically
                           The default is to print also hostnames
  -i  --ipid               print the IP Identifier of the reply
  -l  --print_ttl          print the TTL of the reply
  -F                       targets file for the MT algo
  -B                       set the bandwidth in packets/s
  -c                       number of threads (default 1)
  -E                       probe multiplier
  -r                       set the return flow identifier

[ERROR](Util.cc, 281)Invalid address
Print the route packets take to network host

Usage: traceroute [Options] [Destination]

Options:
  -h, --help               print this help
  -V, --version            print version
  -v, --verbose            print debug messages
  -Q, --quiet              print only results
  -f, --first_ttl=TTL      set the initial ttl to TTL (default: 1)
  -m, --max_ttl=TTL        set the maximum ttl to TTL (default: 30)
  -p, --protocol=PROTOCOL  use PROTOCOL to send probes (udp, tcp, icmp)
                           The default is 'udp'
  -s, --source_port=PORT   set PORT as source port (default: 33456) pid: use PID
  -d, --dest_port=PORT     set PORT as destination port (default: 33457)
  -t, --tos=TOS            set TOS as type of service (default: 0)
  -w MS                    wait MS ms between each probe (default: 50ms)
  -T, --timeout=MS         set a timeout of MS ms on each probe
                           The default is 5000ms
  -q, --query=NBR          send NBR probes to each host (default: 3)
  -M, --missing_hop=HOP    stop traceroute after HOP consecutive down hops
                           The default is 3
  -a, --algo=ALGO          algorithm to use (--algo=help for more help)
                           The default is 'hopbyhop'
  -L, --length=LEN         set the packet length to be used in outgoing packets
                           The default is 0
  -n                       print hop addresses numerically
                           The default is to print also hostnames
  -i  --ipid               print the IP Identifier of the reply
  -l  --print_ttl          print the TTL of the reply
  -F                       targets file for the MT algo
  -B                       set the bandwidth in packets/s
  -c                       number of threads (default 1)
  -E                       probe multiplier
  -r                       set the return flow identifier

# Bandwidth, sent = 0 pkt/s, recv = 0 pkt/s
# Bandwidth, sent = 0 pkt/s, recv = 0 pkt/s
# Bandwidth, sent = 0 pkt/s, recv = 0 pkt/s
# Bandwidth, sent = 0 pkt/s, recv = 0 pkt/s
# Bandwidth, sent = 0 pkt/s, recv = 0 pkt/s
# Bandwidth, sent = 0 pkt/s, recv = 0 pkt/s
# Bandwidth, sent = 0 pkt/s, recv = 0 pkt/s
# Bandwidth, sent = 0 pkt/s, recv = 0 pkt/s
# Bandwidth, sent = 0 pkt/s, recv = 0 pkt/s
# Bandwidth, sent = 0 pkt/s, recv = 0 pkt/s
# Bandwidth, sent = 0 pkt/s, recv = 0 pkt/s
# Bandwidth, sent = 0 pkt/s, recv = 0 pkt/s
# Bandwidth, sent = 0 pkt/s, recv = 0 pkt/s
# Bandwidth, sent = 0 pkt/s, recv = 0 pkt/s
# Bandwidth, sent = 0 pkt/s, recv = 0 pkt/s
# Bandwidth, sent = 0 pkt/s, recv = 0 pkt/s
# Bandwidth, sent = 0 pkt/s, recv = 0 pkt/s
# Bandwidth, sent = 0 pkt/s, recv = 0 pkt/s
traceroute [(10.1.2.125:33456) -> (120.209.131.197:33457)], protocol udp, algo exhaustive, duration 1100 s
 1  P(6, 6) OpenWrt.lan (10.1.2.1)  0.608/0.723/0.947/0.121 ms 
 2  P(0, 6)
 3  P(6, 6) 192.168.200.1 (192.168.200.1)  0.881/1.019/1.123/0.096 ms 
 4  P(6, 6) 58.240.65.65 (58.240.65.65)  1.558/1.632/1.706/0.049 ms 
 5  P(6, 6) 221.6.1.161 (221.6.1.161)  2.220/3.483/5.384/1.248 ms 
 6  P(49, 49) 122.96.66.9 (122.96.66.9):0,1,7,19,20,24,28,34,41  2.376/4.858/12.184/2.395 ms  221.6.2.53 (221.6.2.53):2,9,10,14,16,17,21,22,23,26,27,29,36,39,43  2.722/4.534/6.443/1.176 ms  122.96.66.13 (122.96.66.13):3,4,5,6,8,11,12,13,15,18,25,30,31,32,33,35,37,38,40,42  2.926/5.383/13.015/2.029 ms 
 7  P(6, 6) 219.158.99.157 (219.158.99.157)  10.382/10.511/10.721/0.108 ms 
 8  P(6, 6) 219.158.5.230 (219.158.5.230)  9.818/9.983/10.185/0.117 ms 
 9  P(1, 6) 219.158.34.238 (219.158.34.238)  58.990/58.990/58.990/0.000 ms 
10  P(49, 49) 221.176.17.161 (221.176.17.161):0,1,4,5,6,8,9,10,1,1,1,1,1,11,13,17,18,19,21,23,25,28,30,32,34,35,39,40  0.820/71.882/168.575/28.402 ms  221.176.17.33 (221.176.17.33):2,3,7,12,14,15,16,20,22,24,26,27,29,31,33,36,37,38,41,42,43  0.222/68.499/114.009/31.886 ms 
11  P(49, 49) 221.176.27.193 (221.176.27.193):0,1,5,6,13,21,23,28,30,32,34  59.510/85.183/121.509/18.114 ms  221.176.27.177 (221.176.27.177):2,16,24,26,29,37,43  62.841/77.266/104.709/14.710 ms  221.176.27.189 (221.176.27.189):3,7,12,14,22,27  67.203/87.812/148.375/30.312 ms  221.176.27.197 (221.176.27.197):4,9,35,39  66.675/80.607/93.725/10.166 ms  221.176.27.201 (221.176.27.201):8,11,17,25  62.554/71.004/76.137/5.173 ms  221.176.27.205 (221.176.27.205):10,18,19,40  67.460/74.532/85.296/6.774 ms  221.176.27.185 (221.176.27.185):15,31,36,38  83.744/98.001/119.820/13.452 ms  221.176.27.181 (221.176.27.181):20,33,41,42  60.620/63.564/65.730/1.867 ms 
12  P(6, 6) 221.183.13.210 (221.183.13.210)  35.719/62.987/92.698/24.725 ms 
13  P(6, 6) 120.209.143.130 (120.209.143.130)  31.957/58.936/97.431/20.160 ms 
14  P(6, 6) 120.209.130.146 (120.209.130.146)  52.965/66.687/92.428/15.212 ms 
15  P(6, 6) 120.209.131.197 (120.209.131.197)  30.197/52.035/74.604/15.682 ms !? 

# Bandwidth, sent = 0 pkt/s, recv = 0 pkt/s
# Bandwidth, sent = 0 pkt/s, recv = 0 pkt/s
# Bandwidth, sent = 0 pkt/s, recv = 0 pkt/s
# Bandwidth, sent = 0 pkt/s, recv = 0 pkt/s
# Bandwidth, sent = 0 pkt/s, recv = 0 pkt/s
# Bandwidth, sent = 0 pkt/s, recv = 0 pkt/s
# Bandwidth, sent = 0 pkt/s, recv = 0 pkt/s
# Bandwidth, sent = 0 pkt/s, recv = 0 pkt/s
# Bandwidth, sent = 0 pkt/s, recv = 0 pkt/s
# Bandwidth, sent = 0 pkt/s, recv = 0 pkt/s
# Bandwidth, sent = 0 pkt/s, recv = 0 pkt/s
# Bandwidth, sent = 0 pkt/s, recv = 0 pkt/s
# Bandwidth, sent = 0 pkt/s, recv = 0 pkt/s
# Bandwidth, sent = 0 pkt/s, recv = 0 pkt/s
# Bandwidth, sent = 0 pkt/s, recv = 0 pkt/s
# Bandwidth, sent = 0 pkt/s, recv = 0 pkt/s
traceroute [(10.1.2.125:33456) -> (120.209.131.200:33457)], protocol udp, algo exhaustive, duration 979 s
 1  P(6, 6) OpenWrt.lan (10.1.2.1)  0.687/0.720/0.777/0.030 ms 
 2  P(0, 6)
 3  P(6, 6) 192.168.200.1 (192.168.200.1)  0.891/1.124/1.672/0.253 ms 
 4  P(6, 6) 58.240.65.65 (58.240.65.65)  1.421/1.694/1.899/0.141 ms 
 5  P(6, 6) 221.6.1.161 (221.6.1.161)  3.361/4.607/5.538/0.724 ms 
 6  P(43, 43) 122.96.66.13 (122.96.66.13):0,1,13,15,19,26,30,34,36,37  2.607/4.586/6.676/1.253 ms  122.96.66.9 (122.96.66.9):2,3,6,7,8,10,12,14,16,18,25,27,32,33,35  2.774/4.647/6.363/1.106 ms  221.6.2.53 (221.6.2.53):4,5,9,11,17,20,21,22,23,24,28,29,31  2.796/4.718/7.561/1.305 ms 
 7  P(6, 6) 219.158.99.157 (219.158.99.157)  10.432/10.506/10.548/0.037 ms 
 8  P(6, 6) 219.158.7.54 (219.158.7.54)  9.905/9.960/10.068/0.061 ms 
 9  P(0, 6)
10  P(43, 43) 221.176.17.33 (221.176.17.33):0,2,4,8,10,11,13,15,16,17,18,19,20,23,25,27,30,31,35,36  1.466/73.535/111.909/25.369 ms  221.176.17.161 (221.176.17.161):1,3,5,6,7,9,12,14,21,22,24,26,28,29,32,33,34,37  58.572/80.113/108.512/15.851 ms 
11  P(43, 43) 221.176.27.189 (221.176.27.189):0,4,18,23,25,27,35  71.087/86.100/107.084/10.369 ms  221.176.27.201 (221.176.27.201):1,3,14,24  80.863/91.564/106.268/10.109 ms  221.176.27.185 (221.176.27.185):2,10,11,15,19  79.549/90.623/114.620/12.686 ms  221.176.27.197 (221.176.27.197):5,6,21,26,34,37  78.916/90.381/115.430/12.280 ms  221.176.27.205 (221.176.27.205):7,9,12,28,29,33  90.508/101.924/113.267/7.455 ms  221.176.27.177 (221.176.27.177):8,16,30  80.704/83.065/84.733/1.716 ms  221.176.27.181 (221.176.27.181):13,17,20,31,36  72.854/98.290/133.833/21.852 ms  221.176.27.193 (221.176.27.193):22,32  79.059/84.513/89.967/5.454 ms 
12  P(6, 6) 221.183.13.210 (221.183.13.210)  37.858/52.646/80.291/13.686 ms 
13  P(6, 6) 120.209.143.130 (120.209.143.130)  41.944/52.035/77.837/12.327 ms 
14  P(6, 6) 120.209.130.146 (120.209.130.146)  40.683/100.005/246.053/70.267 ms 
15  P(6, 6) 120.209.131.200 (120.209.131.200)  44.042/53.549/70.344/9.943 ms !? 

